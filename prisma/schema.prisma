generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  uuid          String          @unique @default(cuid())
  accountId     String          @unique
  email_address String          @unique
  nickName      String          @unique
  password      String
  refreshToken  String?
  createdAt     DateTime        @default(now())
  updateAt      DateTime        @updatedAt
  isAdmin       Boolean?
  isManagers    Boolean?
  Comment       Comment[]
  documents     Document[]
  profile       Profile?
  userGroups    UserGroupUser[]
  Attachment    Attachment[]

  @@index([email_address], map: "idx_user_email")
  @@index([isAdmin], map: "idx_user_isAdmin")
}

model Profile {
  id           Int     @id @default(autoincrement())
  phone        String  @unique
  userId       Int     @unique
  profileImage String?
  user         User    @relation(fields: [userId], references: [id])
}

model UserGroup {
  id         Int             @id @default(autoincrement())
  groupName  String          @unique
  groupTitle String          @db.VarChar(45)
  groupDesc  String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  users      UserGroupUser[]
}

model UserGroupUser {
  id        Int       @id @default(autoincrement())
  groupId   Int
  userId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  group     UserGroup @relation(fields: [groupId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@unique([userId, groupId], name: "uniq_ugu_user_group")
  @@index([userId], map: "idx_ugu_user")
  @@index([groupId], map: "idx_ugu_group")
}

model Document {
  id             Int       @id @default(autoincrement())
  categoryId     Int?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  published      Boolean?  @default(false)
  userId         Int?
  authorName     String?   @db.VarChar(45)
  authorPassword String?
  title          String?   @db.VarChar(255)
  content        String?
  isNotice       Boolean?  @default(false)
  isSecrets      Boolean?  @default(false)
  readCount      Int?      @default(0)
  commentCount   Int?      @default(0)
  voteCount      Int?      @default(0)
  resourceId     Int
  resourceType   String
  Comment        Comment[]
  category       Category? @relation("DocumentCategory", fields: [categoryId], references: [id])
  user           User?     @relation(fields: [userId], references: [id])

  @@index([resourceType, resourceId], map: "idx_document_resource")
  @@index([categoryId], map: "idx_document_category")
  @@index([userId], map: "idx_document_user")
}

model Category {
  id           Int        @id @default(autoincrement())
  title        String     @db.VarChar(45)
  desc         String?
  color        String?    @db.VarChar(45)
  order        Int        @default(0)
  parentId     Int?
  resourceId   Int?
  resourceType String     @default("posts")
  parent       Category?  @relation("CategoryChildren", fields: [parentId], references: [id])
  children     Category[] @relation("CategoryChildren")
  documents    Document[] @relation("DocumentCategory")

  @@index([parentId], map: "idx_category_parent")
  @@index([resourceType, resourceId], map: "idx_category_resource")
}

model Posts {
  id        Int      @id @default(autoincrement())
  pid       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postName  String   @unique
  postDesc  String?
  grant     Json?    @db.Json
  config    Json?    @db.Json
  status    String?  @db.VarChar(45)

  @@index([status], map: "idx_posts_status")
}

model Permission {
  id           Int               @id @default(autoincrement())
  action       String
  subjectType  PermissionSubject
  subjectId    Int?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  resourceId   Int               @default(0)
  resourceType String            @default("unknown")

  @@index([resourceType, resourceId], map: "idx_permission_resource")
  @@index([subjectType, subjectId], map: "idx_permission_subject")
}

model Comment {
  id             Int       @id @default(autoincrement())
  uuid           String    @unique @default(cuid())
  content        String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  documentId     Int
  userId         Int?
  authorName     String?   @db.VarChar(45)
  authorPassword String?   @db.VarChar(255)
  parentId       Int?
  isDeleted      Boolean   @default(false)
  isSecret       Boolean   @default(false)
  voteCount      Int       @default(0)
  depth          Int       @default(0)
  document       Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  parent         Comment?  @relation("CommentChildren", fields: [parentId], references: [id])
  children       Comment[] @relation("CommentChildren")
  user           User?     @relation(fields: [userId], references: [id])

  @@index([documentId], map: "idx_comment_document")
  @@index([userId], map: "idx_comment_user")
  @@index([parentId], map: "idx_comment_parent")
}

model DocumentViewLog {
  id         Int      @id @default(autoincrement())
  documentId Int
  userId     Int?
  ipAddress  String?
  viewedAt   DateTime @default(now())

  @@index([documentId, userId])
  @@index([documentId, ipAddress])
}

model Attachment {
  id           Int      @id @default(autoincrement())
  uuid         String   @unique @default(cuid())
  fileName     String
  originalName String
  mimeType     String
  size         Int
  path         String // 실제 저장 경로: /uploads/posts/... 등
  resourceId   Int // 게시글, 유저, 스토어 등 리소스 ID
  documentId   Int?
  resourceType String // posts, users, store, shop 등
  tempId       String? // ✨ 임시 파일 식별자
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  uploadedById Int? // 업로더 User ID
  uploadedBy   User?    @relation(fields: [uploadedById], references: [id])

  @@index([resourceType, resourceId], map: "idx_attachment_resource")
  @@index([uploadedById], map: "idx_attachment_user")
}

enum PermissionSubject {
  guest
  member
  admin
  group
}
